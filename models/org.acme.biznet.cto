/**
 * model definition for blockchain-based, decentralized sensor data trading app
 */

namespace org.acme.biznet

abstract participant Member identified by memberId {
    o String memberId
    o String name
    o String email
}

// Sensorbesitzer, z.B private Personen, Haushalte etc.
participant Provider identified by providerId extends Member {
  o String providerId
  --> SDTWallet sdtWallet
  --> BTCWallet btcWallet
  --> Account account
}

// Sensordatenabnehmer, z.B unabhängiger Dienstleister
participant Requester identified by requesterId extends Member {
  o String requesterId
  --> SDTWallet sdtWallet
  --> Account account
}

// Datenkonsument, der die aufbereitete Sensordaten kauft, z.B Behörden, Regierung etc.
participant Consumer identified by consumerId extends Member {
 o String consumerId
 --> Account account
}

// dem Ökosystem involvierte Exchange.
participant Exchange identified by exchangeId extends Member {
 o String exchangeId 
 --> SDTWallet sdtWallet
 --> BTCWallet btcWallet
 --> Account account
}

// SDT Token Wallet von den Netzwerkteilnehmern.
asset SDTWallet identified by sdtWalletId {
  o String sdtWalletId
  o Double balance default = 0.0
  --> Member owner 
}

 // BTC Wallet von den Netzwerkteilnehmern.
asset BTCWallet identified by btcWalletId {
  o String btcWalletId
  o Double balance default = 0.0
  --> Member owner 
}
  
// Geldkonto von den Netzwerkteilnehmern.
asset Account identified by accountId {
  o String accountId
  o Double balance default = 0.0
  --> Member owner 
}

// Sensor von Provider
 asset Sensor identified by sensorId {
 o String sensorId
 o Address position 
 o String sensorType default = "PM2.5" 
 o String sensorName default = "NOVA_SDS011"
 o String manufacturer default = "Nova Fitness"
 o String firmware default = "v1.0.8"
  --> Provider owner 
}
  
enum TransferStatus {
 o FOR_SALE
 o SOLD
 o PROCESSED
 o FORWARDED
}
 
 concept Address {
  o String country
  o String city 
  o String street 
  o Integer postalCode 
}
       
// Rohdaten, die von Provider erzeugt werden.
asset RawData identified by RawDataId {
  o String RawDataId
  o Address position
  o DateTime createdTime
  o Double[] PM25
  o Double PM10 default = 0.0
  o Double CO default = 0.0
  o Double NO2 default = 0.0
  o Double O3 default = 0.0
  o Double SO2 default = 0.0 
  o TransferStatus status default = "FOR_SALE"
  --> Member owner
  --> Sensor fromSensor
}

enum AirPollutionLevel {
  o GOOD
  o MODERATE
  o UNHEALTHY_FOR_SENSITIVE_GROUPS
  o UNHEALTHY
  o VERY_UNHEALTHY
  o HAZARDOUS  
}

concept Location {
  o Double latitude
  o Double longitude
}

// Aufgewertete Luftqualitäsdaten, die von Data Processor erzeugt werden.
asset EnrichedData identified by EnrichedDataId {
 o String EnrichedDataId
 o Location location
 o String country
 o DateTime createdTime
 o Double PM25_Concentration default = 0.0
 o String AQIndex default = "0-50"
 o AirPollutionLevel APLevel
 o String healthImplications default = "none"
 o String cautionaryStatement default = "none"
 o TransferStatus status default = "PROCESSED"
 --> Member owner
 --> RawData fromRawData
}

// Rohdaten über Luftverschmtzung werden gegen Tokens verkauft.
transaction TransferRawData {
  o Double price default = 2.0
  --> RawData rawdata 
  --> Requester newOwner
  --> SDTWallet fromSDT
  --> SDTWallet toSDT
}

//Angereicherte Daten werden gegen Cash verkauft.
transaction TransferEnrichedData {
 o Double price default = 2.0
 --> EnrichedData enricheddata
 --> Consumer newOwner
 --> Account fromCash
 --> Account toCash
}

// Cash gegen Tokens getauscht.
transaction TradeCashToTokens {
  o Double cashRate default = 2.0
  o Double cashValue default = 1.0 range = [1.0,]
  --> Account fromCash
  --> Account toCash
  --> SDTWallet fromSDT 
  --> SDTWallet toSDT
}
   
// Cash gegen BTC getauscht.
transaction TradeCashToBTC {
  o Double cashRate default = 0.0001
  o Double cashValue default = 50.0 range = [50.0,]
  --> Account fromCash
  --> Account toCash
  --> BTCWallet fromBTC 
  --> BTCWallet toBTC
  
}

// Tokens gegen Cash getauscht.
transaction TradeTokensToCash {
    o Double tokenRate default = 0.5       
    o Double tokenValue default = 2.0 range = [2.0,]    
    --> SDTWallet fromSDT
    --> SDTWallet toSDT
    --> Account fromCash
    --> Account toCash
}

// Tokens gegen BTC getauscht
transaction TradeTokensToBTC {
  o Double tokenRate default = 0.00005
  o Double tokenValue default = 100.0 range = [100.0,]
  --> SDTWallet fromSDT
  --> SDTWallet toSDT
  --> BTCWallet fromBTC
  --> BTCWallet toBTC
}

// BTC gegen Tokens getauscht
transaction TradeBTCToTokens {
  o Double BTCRate default = 20000.0
  o Double BTCValue default = 0.005 range = [0.00500000,]
  --> BTCWallet fromBTC
  --> BTCWallet toBTC 
  --> SDTWallet fromSDT 
  --> SDTWallet toSDT
}

// BTC gegen Cash getauscht
transaction TradeBTCToCash {
  o Double BTCRate default = 10000.0
  o Double BTCValue default = 0.005 range = [0.00500000,]
  --> BTCWallet fromBTC
  --> BTCWallet toBTC 
  --> Account fromCash 
  --> Account toCash
}

// Wenn Luftqualitätsdaten verkauft werden, wird eine Benachrichtigung erzeugt.
event TransferRawDataNotification {
    --> RawData rawdata
}

// Wenn aufgewertete Luftqualitätsdaten verkauft werden, wird eine Benachrichtigung erzeugt
event TransferEnrichedDataNotification {
    --> EnrichedData enricheddata
}

