/**
 * model definition for blockchain-based, decentralized sensor data trading app
 */

namespace org.acme.biznet

concept Address {
  o String country
  o String city 
  o String street 
  o Integer postalCode 
}

// Sensorenbesitzer, z.B private Personen, Haushalte etc.
participant SensorOwner identified by sensorOwnerId {
  o String sensorOwnerId
  o String name
  o String email
  o Address address 
  --> Wallet[] wallet
  --> Account account
}

// Sensordatenabnehmer, z.B unabhängige Dienstleister, Forschungszentren etc.
participant DataProcessor identified by dataProcessorId {
  o String dataProcessorId
  o String name
  o String email
  --> Wallet wallet
  --> Account account
}

// Datenkonsument, der die aufbereitete Sensordaten kauft, z.B Behörden, Regierung etc.
participant DataConsumer identified by dataConsumerId {
 o String dataConsumerId
 o String name
 o String email
 --> Account account
}

// dem Ökosystem involvierte Exchange.
participant Exchange identified by exchangeId {
 o String exchangeId
 o String name
 o String email 
 --> Wallet[] wallet
 --> Account account
}

// Wallet von den Netzwerkteilnehmern.
asset Wallet identified by walletId {
  o String walletId
  o String ownerId
  o String token default = "SDT"
  o Double balance default = 0.0
}

// Geldkonto von den Netzwerkteilnehmern.
asset Account identified by accountId {
  o String accountId
  o String ownerId
  o String currency default = "EUR"
  o Double balance default = 0.0
}

enum TransferStatus {
 o FOR_SALE
 o SOLD
 o PROCESSED
 o FORWARDED
}

asset Sensor identified by sensorId {
 o String sensorId
 o String sensorType default = "PM2.5" 
 o String ownerId 
 o String sensorName default = "NOVA_SDS011"
 o String manufacturer default = "Nova Fitness"
 o String firmware default = "v1.0.8" 
}
  
// Luftverschmutzungsdaten, die von Sensor Owner verkauft werden.
asset RawData identified by RawDataId {
  o String RawDataId
  o String fromSensor default = "sensorId"
  o Address position
  o DateTime createdTime
  o Double[] PM25
  o Double PM10 default = 0.0
  o Double CO default = 0.0
  o Double NO2 default = 0.0
  o Double O3 default = 0.0
  o Double SO2 default = 0.0
  o TransferStatus status default = "FOR_SALE"
  o OwnerEntity ownerEntity default = "SensorOwner"
  --> SensorOwner owner 
}

enum AirPollutionLevel {
  o GOOD
  o MODERATE
  o UNHEALTHY_FOR_SENSITIVE_GROUPS
  o UNHEALTHY
  o VERY_UNHEALTHY
  o HAZARDOUS  
}

enum OwnerEntity {
  o SensorOwner
  o DataProcessor
  o DataConsumer 
  o Exchange  
}

concept Location {
  o Double latitude
  o Double longitude
}

// Aufgewertete Luftqualitäsdaten, die von Data Processor dem Konsumenten zur Verfügung gestellt werden.
asset EnhancedData identified by EnhancedDataId {
 o String EnhancedDataId
 o String FromRawData default = "RawDataId"
 o Location location
 o String country
 o DateTime createdTime
 o Double PM25_Concentration default = 0.0
 o String AQIndex default = "0-50"
 o AirPollutionLevel APLevel
 o String healthImplications default = "none"
 o String cautionaryStatement default = "none"
 o TransferStatus status default = "PROCESSED"
 o OwnerEntity ownerEntity default = "DataProcessor" 
 --> DataProcessor owner
}

// Sensordaten über Luftverschmtzung werden gegen Coins verkauft.
transaction TransferRawData {
  o Double amount
  --> RawData rawData 
  --> SensorOwner owner
  --> DataProcessor newOwner
  --> Wallet fromWallet
  --> Wallet toWallet
}

//Aufgewertete Luftqualitäsdaten werden dem Konsumenten zur Verfügung gestellt.
transaction TransferEnhancedData {
 o Double amount
 --> EnhancedData enhancedData
 --> DataProcessor owner
 --> DataConsumer newOwner
 --> Account fromAccount
 --> Account toAccount
}

// Geld gegen Tokens getauscht.
transaction ExchangeCashToTokens {
  o Double cashRate default = 0.5
  o Double cashValue default = 0.0
  --> Wallet fromWallet 
  --> Wallet toWallet
  --> Account fromAccount
  --> Account toAccount
}

// Tokens gegen Geld getauscht.
transaction ExchangeTokensToCash {
    o Double tokenRate default = 0.5       
    o Double tokenValue default = 0.0    
    --> Wallet fromWallet
    --> Wallet toWallet
    --> Account fromAccount
    --> Account toAccount
}

// Tokens gegen BTC getauscht
transaction ExchangeTokensToBTC {
  o Double tokenRate default = 0.5
  o Double tokenValue default = 0.0
  --> Wallet fromWallet
  --> Wallet toWallet
}

// BTC gegen Tokens getauscht
transaction BTCToTokens {
  o Double BTCRate default = 0.5
  o Double BTCValue default = 0.0
  --> Wallet fromWallet
  --> Wallet toWallet
}

// Wenn Luftqualitätsdaten verkauft werden, wird eine Benachrichtigung erzeugt.
event TransferRawDataNotification {
    --> RawData rawData
}

// Wenn aufgewertete Luftqualitätsdaten an Konsumenten weitergeleitet werden, wird eine Benachrichtigung erzeugt
event TransferEnhancedDataNotification {
    --> EnhancedData enhancedData
}

