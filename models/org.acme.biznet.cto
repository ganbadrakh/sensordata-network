/**
 * model definition for blockchain-based, decentralized sensor data trading app
 */

namespace org.acme.biznet

import composer.base.*

enum TransferStatus {
 o FOR_SALE
 o SOLD
 o PROCESSED
 o FORWARDED
}

enum APLevel {
  o GOOD
  o MODERATE
  o UNHEALTHY_FOR_SENSITIVE_GROUPS
  o UNHEALTHY
  o VERY_UNHEALTHY
  o HAZARDOUS  
}

enum OwnerEntity {
  o Seller
  o Buyer
  o Exchange
  o DataConsumer 
}

/**
 * Sensorenbesitzer, z.B private Personen, Haushalte etc.
 */
participant Seller identified by sellerId extends Member {
  o String sellerId
  o String firstName
  o String lastName
  --> Wallet wallet
  --> Account account
}

/**
 * Sensordatenabnehmer, z.B unabhängige Dienstleister, Forschungszentren etc.
 */
participant Buyer identified by buyerId extends Member {
  o String buyerId
  o String name
  --> Wallet wallet
  --> Account account
}

/**
 * dem Ökosystem involvierte Exchanges.
 */
participant Exchange identified by exchangeId extends Member {
 o String exchangeId
 o String name
 --> Wallet wallet
 --> Account account
}

/**
 * Konsument, der die aufbereitete Sensordaten kauft, z.B Behörden, Regierung, WHO etc.
 */
participant DataConsumer identified by dataConsumerId extends Member {
 o String dataConsumerId
 o String name
 --> Account account
}

/**
 * Wallets von den Netzwerkteilnehmern.
 */
asset Wallet identified by walletId {
  o String walletId
  o String ownerId
  o String token default="SDT"
  o Double balance default=0.0
}

/**
 * Geldkonten von den Netzwerkteilnehmern.
 */
asset Account identified by accountId {
  o String accountId
  o String ownerId
  o String currency default="EUR"
  o Double balance default=0.0
}

/**
 * Luftverschmutzungsdaten, die von Seller verkauft werden.
 */
asset AirPollutionData identified by airPollutionDataId {
  o String airPollutionDataId
  o String location
  o DateTime datetime
  o Double[] PM25
  o Double PM10 default=0.0
  o Double CO default=0.0
  o Double NO2 default=0.0
  o Double O3 default=0.0
  o Double SO2 default=0.0 
  o TransferStatus status default = "FOR_SALE"
  o OwnerEntity ownerEntity default="Seller"
  --> Member owner
}

/**
 * Aufgewertete Luftqualitäsdaten, die von Buyer dem Konsumenten zur Verfügung gestellt werden.
 */
asset ExtendedData identified by extendedDataId {
 o String extendedDataId
 o String dataFrom default="ProvideAirPollutionDataId"
 o String location default="locationFromAPD"
 o DateTime datetime
 o String PM25_Concentration
 o String AQIndex default="0-50"
 o APLevel level
 o String healthImplications
 o String cautionaryStatement
 o TransferStatus status default="PROCESSED"
 o OwnerEntity ownerEntity default="Buyer" 
 --> Member owner
}

/**
 * Aktuelle Luftverschmtzungsdaten werden gegen Coins verkauft.
 */
transaction TradeAirPollutionData {
  o Double amount
  --> AirPollutionData airpollutiondata 
  --> Seller owner
  --> Buyer newOwner
  --> Wallet fromWallet
  --> Wallet toWallet
}

/**
 * Aufgewertete Luftqualitäsdaten werden dem Konsumenten zur Verfügung gestellt.
 */
transaction ProvideExtendedData {
 o Double amount
 --> ExtendedData extendeddata
 --> Buyer owner
 --> DataConsumer newOwner
 --> Account fromAccount
 --> Account toAccount
}

/**
 * Geld gegen Tokens getauscht.
 */
transaction ExchangeCashToTokens {
  o Double cashRate default=2.0
  o Double cashValue
  --> Wallet fromWallet 
  --> Wallet toWallet
  --> Account fromAccount
  --> Account toAccount
}

/**
 * Tokens gegen Geld getauscht.
 */
transaction ExchangeTokensToCash {
    o Double tokenRate default=2.0       
    o Double tokenValue    
    --> Wallet fromWallet
    --> Wallet toWallet
    --> Account fromAccount
    --> Account toAccount
}

  /**
 * Wenn Luftqualitätsdaten verkauft werden, wird eine Benachrichtigung erzeugt.
 */
event TradeAirPollutionDataNotification {
    --> AirPollutionData airpollutiondata
}

/**
 * Wenn aufgewertete Luftqualitätsdaten an Konsumenten weitergeleitet werden, wird eine Benachrichtigung erzeugt.
 */
event ProvideExtendedDataNotification {
    --> ExtendedData extendeddata
}

